class ErrorSalarioBase(Exception):
    """Error cuando el salario base es menor o igual a cero"""
    def __init__(self, salario):
        self.salario = salario
        super().__init__(f"Error: El salario base ({salario}) debe ser mayor que cero.")


class ErrorDiasLaborados(Exception):
    """Error cuando los días laborados son inválidos"""
    def __init__(self, dias):
        self.dias = dias
        super().__init__(f"Error: Los días laborados ({dias}) deben estar entre 0 y 30.")


class ErrorHorasExtras(Exception):
    """Error cuando las horas extras son negativas"""
    def __init__(self, horas):
        self.horas = horas
        super().__init__(f"Error: Las horas extras ({horas}) no pueden ser negativas.")


# Paso 1: Función principal con validaciones usando excepciones
def calcular_nomina(salario_base, dias_laborados, horas_extras):

    if salario_base <= 0:
        raise ErrorSalarioBase(salario_base)

    if dias_laborados < 0 or dias_laborados > 30:
        raise ErrorDiasLaborados(dias_laborados)

    if horas_extras < 0:
        raise ErrorHorasExtras(horas_extras)

    salario_dia = salario_base / 30
    valor_hora = salario_base / 240
    salario = salario_dia * dias_laborados
    extras = horas_extras * valor_hora * 1.25
    total = salario + extras

    return round(total, 2)

